AssertionError: False is not true : Your MinimaxAgent.minimax function returned a move that was not one of the optimal moves for the given heurisitc. 
Available choices:
[(4, 3), (7, 2)]
Your Selection:
(3, 0)

Test Case Details:
------------------
Heuristic: improved_score
Depth limit: 1
Initial Board State:
     0   1   2   3   4   5   6   7   8
0  |   |   |   |   |   |   |   |   |   | 
1  |   |   |   |   |   |   |   |   |   | 
2  |   |   |   | - | - |   |   |   |   | 
3  |   |   | - | - |   | - | - |   |   | 
4  |   |   | - |   |   | - | 2 |   |   | 
5  |   | 1 | - | - |   | - | - |   |   | 
6  |   |   |   | - | - | - |   |   |   | 
7  |   |   |   | - |   |   |   |   |   | 
8  |   |   |   |   |   |   |   |   |   | 

game._board_state:
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 14]


__________________________________________________________________________________________________________________________________________________________


Failed Test: 2. Test functionality of MinimaxPlayer.minimax()
----------------------------------------------------------------------
AssertionError: False is not true : Your MinimaxAgent.minimax function returned a move that was not one of the optimal moves for the given heurisitc. 
Available choices:
[(2, 1), (6, 1)]
Your Selection:
(3, 0)

Test Case Details:
------------------
Heuristic: improved_score
Depth limit: 1
Initial Board State:
     0   1   2   3   4   5   6   7   8
0  |   |   |   |   |   |   |   |   |   | 
1  |   |   |   |   | - |   |   |   |   | 
2  |   |   | - | - | - | - | - |   |   | 
3  |   |   |   |   | - | - | - |   |   | 
4  |   |   | 1 | - | - | - | - |   |   | 
5  |   |   |   |   | - |   |   |   |   | 
6  |   |   | - | 2 | - |   |   |   |   | 
7  |   |   |   |   |   |   |   |   |   | 
8  |   |   |   |   |   |   |   |   |   | 

game._board_state:
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 22]


__________________________________________________________________________________________________________________________________________________________

Failed Test: 2. Test functionality of MinimaxPlayer.minimax()
----------------------------------------------------------------------
AssertionError: False is not true : Your MinimaxAgent.minimax function did not call the heuristic evaluation function in all of the expected set of leaf nodes configurations in the game tree as player 1. Make sure that you are using the self.score() method to evaluate the board, and not calling one of the heuristic functions directly. Leaf nodes are shown as (player_1, player_2) location pairs. Optional nodes may or may not be visited depending on your termination test.

Expected leaf nodes:
{((8, 2), (1, 1)), ((5, 1), (0, 2)), ((5, 1), (1, 1)), ((5, 1), (3, 1)), ((8, 2), (0, 2)), ((5, 1), (1, 5)), ((8, 2), (0, 4)), ((8, 2), (3, 1)), ((8, 4), (0, 2)), ((8, 2), (1, 5)), ((8, 4), (1, 1)), ((8, 4), (1, 5)), ((8, 4), (3, 1)), ((7, 1), (1, 1)), ((8, 4), (0, 4)), ((7, 1), (1, 5)), ((7, 1), (3, 1)), ((7, 1), (0, 2)), ((7, 1), (0, 4)), ((5, 1), (0, 4))}
Optional leaf nodes:
set()
Leaf nodes your agent evaluated:
{((8, 4), (3, 1)), ((8, 4), (0, 2)), ((8, 4), (0, 4)), ((7, 1), (1, 5)), ((8, 4), (2, 3)), ((8, 2), (0, 2)), ((7, 1), (2, 3)), ((5, 1), (1, 1)), ((8, 2), (3, 1)), ((5, 1), (2, 3)), ((8, 2), (0, 4)), ((7, 1), (1, 1)), ((8, 4), (1, 1)), ((5, 1), (1, 5)), ((8, 4), (1, 5)), ((8, 2), (1, 1)), ((7, 1), (0, 4)), ((5, 1), (0, 2)), ((5, 1), (3, 1)), ((8, 2), (1, 5)), ((8, 2), (2, 3)), ((7, 1), (3, 1)), ((7, 1), (0, 2)), ((5, 1), (0, 4))}
Skipped nodes:
set()
Extra nodes:
{((8, 4), (2, 3)), ((5, 1), (2, 3)), ((8, 2), (2, 3)), ((7, 1), (2, 3))}

Test Case Details:
------------------
Heuristic: open_move_score
Depth limit: 2
Initial Board State:
     0   1   2   3   4   5   6   7   8
0  |   |   |   |   |   |   |   |   |   | 
1  |   |   |   |   |   |   |   |   |   | 
2  |   |   | - | 2 | - | - |   |   |   | 
3  | - |   | - | - | - | - |   | - |   | 
4  |   | - | - | - | - | - |   |   |   | 
5  |   |   | - |   | - | - | - |   |   | 
6  |   |   | - | 1 | - | - | - |   |   | 
7  |   |   |   |   | - | - |   |   |   | 
8  |   |   |   |   |   |   |   |   |   | 

game._board_state:
[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 33]




__________________________________________________________________________________________________________________________________________________________
__________________________________________________________________________________________________________________________________________________________
__________________________________________________________________________________________________________________________________________________________
__________________________________________________________________________________________________________________________________________________________
__________________________________________________________________________________________________________________________________________________________
__________________________________________________________________________________________________________________________________________________________
__________________________________________________________________________________________________________________________________________________________